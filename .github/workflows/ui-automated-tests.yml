name: UI Tests on Windows and MacOS 🧪

on:
  schedule:
    - cron: "0 0/6 * * 1-5"
  pull_request:
    types: [opened, synchronize, reopened, edited]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CARGO_TERM_COLOR: always

jobs:
  build-app:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
        include:
          - os: macos-latest
            build-instruction: make unsigned-dmg
          - os: windows-latest
            build-instruction: cargo build --release --package uplink -F production_mode
    runs-on:
      labels: ${{ matrix.os }}
    steps:
      - name: Checkout testing directory 🔖
        uses: actions/checkout@v3
        with:
          repository: Satellite-im/Uplink

      - name: Set up cargo cache 🛠️
        uses: Swatinem/rust-cache@v2

      - name: Install Rust 💿
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.68.2
          override: true
          components: rustfmt, clippy

      - name: Install Protobuf 💿
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{env.GITHUB_TOKEN}}

      - if: matrix.os == 'macos-latest'
        name: Add Targets for MacOS
        env:
          MACOSX_DEPLOYMENT_TARGET: "10.13"
        run: |
          rustup target add x86_64-apple-darwin aarch64-apple-darwin

      - name: Run cargo update 🌐
        run: cargo update

      - name: Build executable 🖥️
        run: ${{ matrix.build-instruction }}
        continue-on-error: true

      - if: matrix.os == 'macos-latest'
        name: Create ZIP archive on MacOS 🗳️
        run: |
          ditto -c -k --sequesterRsrc --keepParent target/macos_bundle/UplinkA.app Uplink-Mac-Universal.zip

      - if: matrix.os == 'windows-latest'
        name: Create ZIP archive on Windows 🗳️
        run: Compress-Archive -Path target/release/uplinkA.exe -Destination uplinkWindows.zip

      - if: matrix.os == 'macos-latest'
        name: Calculate hashes 🧮
        run: |
          shasum -a 256 Uplink-Mac-Universal.zip > Uplink-Mac-Universal.zip.sha256.txt

      - if: matrix.os == 'macos-latest'
        name: Upload Artifact ⬆️
        uses: actions/upload-artifact@v3
        env:
          NODE_OPTIONS: "--max-old-space-size=8192"
        with:
          name: Uplink-macos-latest
          path: |
            Uplink-Mac-Universal.zip
            Uplink-Mac-Universal.zip.sha256.txt

      - if: matrix.os == 'windows-latest'
        name: Upload Executable ⬆️
        uses: actions/upload-artifact@v3
        with:
          name: Uplink-windows-latest
          path: uplinkWindows.zip

      - name: Add label if any of build jobs failed
        if: failure()
        uses: buildsville/add-remove-label@v2.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          labels: |
            Failed Automated Test
          type: add

  test:
    needs: build-app
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
        include:
          - os: macos-latest
            appium-driver: |
              appium driver install mac2
              appium driver list
            os-name: MacOS
          - os: windows-latest
            appium-driver: |
              appium driver install --source=npm appium-windows-driver
              appium driver list
            os-name: Windows
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout testing directory 🔖
        uses: actions/checkout@v3

      - if: matrix.os == 'windows-latest'
        name: Change resolution on Windows Runner
        run: Set-DisplayResolution -Width 1920 -Height 1080 -Force
        shell: powershell

      - if: matrix.os == 'macos-latest'
        name: Download the MacOS app 🗳️
        uses: actions/download-artifact@v3
        with:
          name: Uplink-macos-latest
          path: ./apps

      - if: matrix.os == 'windows-latest'
        name: Download the Windows app 🗳️
        uses: actions/download-artifact@v3
        with:
          name: Uplink-windows-latest
          path: ./apps

      - if: matrix.os == 'macos-latest'
        name: Enable opening app not codesigned 🖥️
        run: sudo spctl --master-disable

      - if: matrix.os == 'macos-latest'
        name: Copy DMG to Appium Apps Directory 💿
        working-directory: ./apps
        run: |
          unzip Uplink-Mac-Universal.zip
          cp -r ./Uplink.app /Applications/
          sudo xattr -r -d com.apple.quarantine /Applications/Uplink.app

      - if: matrix.os == 'windows-latest'
        name: Extract .zip into apps Directory 🗳️
        run: Expand-Archive -Path ./apps/uplinkWindows.zip -DestinationPath ./apps

      - name: Setup Node.js 🔨
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "npm"

      - name: Cache NPM dependencies 🔨
        uses: actions/cache@v3
        id: cache-mac-windows
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Install NPM dependencies 📦
        if: steps.cache-mac-windows.outputs.cache-hit != 'true'
        run: npm ci

      - name: Install Appium Server 💻
        run: |
          npm install -g appium@next
          appium -v

      - name: Install Appium Driver 💻
        run: ${{ matrix.appium-driver }}

      - if: matrix.os == 'macos-latest'
        name: Delete Cache Folder if exists - Mac
        run: rm -rf ~/.uplink

      - if: matrix.os == 'windows-latest'
        name: Delete Cache Folder if exists - Windows
        run: If (Test-Path $home/.uplink) {Remove-Item -Recurse -Force $home/.uplink} Else { Break }
        shell: powershell

      - if: matrix.os == 'macos-latest'
        name: Run Tests on MacOS 🧪
        id: test-execution-macos
        run: npm run mac.ci

      - if: matrix.os == 'windows-latest'
        name: Run Tests on Windows 🧪
        id: test-execution-windows
        run: npm run windows.ci

      - name: Publish Test Results for ${{ matrix.os-name }}
        uses: EnricoMi/publish-unit-test-result-action/composite@v2
        if: always()
        with:
          junit_files: "./test-report/*.xml"
          ignore_runs: true
          job_summary: false
          compare_to_earlier_commit: false
          check_name: "UI Automated Test Results on ${{ matrix.os-name}}"

      - name: Upload Screenshots for ${{ matrix.os-name }} 📷
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: appium-screenshots-${{ matrix.os-name }}
          path: ./test-results

      - name: Upload Appium Log for ${{ matrix.os-name }} 📷
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: appium-log-${{ matrix.os-name }}
          path: ./appium.log

      - if: matrix.os == 'macos-latest' && always()
        name: Upload Test User Accounts Created 📷
        uses: actions/upload-artifact@v3
        with:
          name: appium-test-accounts
          path: ./tests/fixtures/users/

      - name: Add label if any of test jobs failed
        if: failure()
        uses: buildsville/add-remove-label@v2.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          labels: |
            Failed Automated Test
          type: add

  test-chats:
    if: always()
    needs: test
    runs-on: macos-latest
    strategy:
      fail-fast: true
      matrix:
        user: ["ChatUserA", "ChatUserB"]
        include:
          - user: "ChatUserA"
            npm-command: "npm run mac.chatA"
          - user: "ChatUserB"
            npm-command: "npm run mac.chatB"

    steps:
      - name: Checkout testing directory 🔖
        uses: actions/checkout@v3

      - name: Download the MacOS app 🗳️
        uses: actions/download-artifact@v3
        with:
          name: Uplink-macos-latest
          path: ./apps

      - name: Download Test User Accounts 🗳️
        uses: actions/download-artifact@v3
        with:
          name: appium-test-accounts
          path: ./tests/fixtures/users/

      - name: Setup Node.js 🔨
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "npm"

      - name: Cache NPM dependencies 🔨
        uses: actions/cache@v3
        id: cache-appium
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Install NPM dependencies 📦
        if: steps.cache-appium.outputs.cache-hit != 'true'
        run: npm ci

      - name: Enable opening app not codesigned 🖥️
        run: sudo spctl --master-disable

      - name: Remove all notifications before starting tests 🖥️
        run: killall NotificationCenter

      - name: Copy DMG to Appium Apps Directory 💿
        working-directory: ./apps
        run: |
          unzip Uplink-Mac-Universal.zip
          cp -r ./Uplink.app /Applications/
          sudo xattr -r -d com.apple.quarantine /Applications/Uplink.app

      - name: Install and Run Appium Server 💻
        run: |
          npm install -g appium@next
          appium -v
          appium driver install mac2
          appium driver list

      - name: Delete Cache Folder if exists
        run: |
          rm -rf ~/.uplink
          cp -r ./tests/fixtures/users/${{ matrix.user }}/. ~/.uplink

      - if: matrix.user == 'ChatUserA'
        name: Run WebdriverIO tests for Chat User A 🧪
        id: test-execution-ChatUserA
        run: ${{ matrix.npm-command }}

      - if: matrix.user == 'ChatUserB'
        name: Run WebdriverIO tests for Chat User B 🧪
        id: test-execution-ChatUserB
        run: ${{ matrix.npm-command }}

      - name: Upload Screenshots for ${{ matrix.user }} 📷
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: appium-screenshots-${{ matrix.user }}
          path: ./test-results

      - name: Upload Appium Log for ${{ matrix.user }} 📷
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: appium-log-${{ matrix.user }}
          path: ./appium.log

      - name: Add label if any of test jobs failed
        if: failure()
        uses: buildsville/add-remove-label@v2.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          labels: |
            Failed Automated Test
          type: add

  remove-artifacts:
    needs: [build-app, test, test-chats]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout testing directory 🔖
        uses: actions/checkout@v3

      - name: Remove label if all test jobs succeeded
        uses: buildsville/add-remove-label@v2.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          labels: |
            Failed Automated Test
          type: remove

      - name: Delete Chat Users Accounts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: appium-test-accounts

      - name: Delete app Windows
        uses: geekyeggo/delete-artifact@v2
        with:
          name: Uplink-windows-latest

      - name: Delete app MacOS
        uses: geekyeggo/delete-artifact@v2
        with:
          name: Uplink-macos-latest
